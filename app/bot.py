import logging
import sqlite3
import os
import uuid
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode
from py3xui import Api, Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
XUI_PANEL_URL = os.getenv('XUI_PANEL_URL')
XUI_USERNAME = os.getenv('XUI_USERNAME')
XUI_PASSWORD = os.getenv('XUI_PASSWORD')
INBOUND_ID = int(os.getenv('INBOUND_ID', '1'))
DATA_LIMIT_GB = int(os.getenv('DATA_LIMIT_GB', '10'))
BOT_USERNAME = os.getenv('BOT_USERNAME')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([BOT_TOKEN, XUI_PANEL_URL, XUI_USERNAME, XUI_PASSWORD]):
    missing = []
    if not BOT_TOKEN: missing.append('BOT_TOKEN')
    if not XUI_PANEL_URL: missing.append('XUI_PANEL_URL')
    if not XUI_USERNAME: missing.append('XUI_USERNAME')
    if not XUI_PASSWORD: missing.append('XUI_PASSWORD')
    raise Exception(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π
BASE_DIR = Path(__file__).parent
DATA_DIR = BASE_DIR / "data"
DATA_DIR.mkdir(exist_ok=True)
DB_NAME = DATA_DIR / "users.db"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# ========== –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ==========

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE,
                username TEXT,
                full_name TEXT,
                language_code TEXT,
                subscription_url TEXT,
                xui_client_id TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()
        logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {DB_NAME}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")


def add_user(telegram_id, username, full_name, language_code, subscription_url, xui_client_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É"""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute(
            """INSERT INTO users (telegram_id, username, full_name, language_code, subscription_url, xui_client_id) 
               VALUES (?, ?, ?, ?, ?, ?)""",
            (telegram_id, username, full_name, language_code, subscription_url, xui_client_id)
        )
        conn.commit()
        conn.close()
        return True
    except sqlite3.IntegrityError:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False


def get_user(telegram_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (telegram_id,))
        user = cursor.fetchone()
        conn.close()
        return user
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None


# ========== –§–£–ù–ö–¶–ò–ò 3X-UI ==========

def login_to_xui():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ 3x-ui"""
    try:
        api = Api(
            XUI_PANEL_URL,
            XUI_USERNAME,
            XUI_PASSWORD,
            use_tls_verify=False
        )
        api.login()
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ 3x-ui")
        return api
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ 3x-ui: {e}")
        return None


def generate_client_email(telegram_id, username):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è email –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Telegram"""
    if username:
        email = f"{username}@telegram.{telegram_id}.vpn"
    else:
        email = f"user{telegram_id}@telegram.vpn"
    return email.lower()


def create_xui_client(telegram_id, username, full_name, data_limit_gb=10):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ 3x-ui"""
    try:
        api = login_to_xui()
        if not api:
            return None

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        client_id = str(uuid.uuid4())

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º email –Ω–∞ –æ—Å–Ω–æ–≤–µ Telegram –¥–∞–Ω–Ω—ã—Ö
        email = generate_client_email(telegram_id, username)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
        client_config = Client(
            id=client_id,
            email=email,
            flow="xtls-rprx-vision",
            enable=True,
            limitIp=0,
            totalGB=data_limit_gb * 1073741824,  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –±–∞–π—Ç—ã
            expiryTime=0,
            tgId=str(telegram_id),
            subId=""
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∏–Ω–±–∞—É–Ω–¥
        result = api.client.add(INBOUND_ID, [client_config])

        if result:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_url = generate_subscription_url(client_id)
            logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {email} (ID: {client_id})")
            return {
                'client_id': client_id,
                'subscription_url': subscription_url,
                'email': email,
                'success': True
            }
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ 3x-ui")
            return None

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return None


def generate_subscription_url(client_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        base_url = XUI_PANEL_URL.rstrip('/')
        subscription_url = f"{base_url}/sub/{INBOUND_ID}/{client_id}"
        logger.info(f"üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞: {subscription_url}")
        return subscription_url
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        return f"{XUI_PANEL_URL}/sub/{client_id}"


def test_xui_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ 3x-ui"""
    try:
        api = login_to_xui()
        if api:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω–±–∞—É–Ω–¥–æ–≤
            inbounds = api.inbound.get()
            if inbounds:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ 3x-ui —É—Å–ø–µ—à–Ω–æ")
                return True
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


def get_existing_client(telegram_id):
    """–ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ Telegram ID"""
    try:
        api = login_to_xui()
        if not api:
            return None

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–±–∞—É–Ω–¥–µ
        inbound = api.inbound.get(INBOUND_ID)
        if not inbound:
            return None

        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å matching tgId
        settings = inbound.get('settings', {})
        clients = settings.get('clients', [])

        for client in clients:
            if client.get('tgId') == str(telegram_id):
                client_id = client.get('id')
                subscription_url = generate_subscription_url(client_id)
                email = client.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')
                return {
                    'client_id': client_id,
                    'subscription_url': subscription_url,
                    'email': email,
                    'existing': True
                }

        return None

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return None


# ========== TELEGRAM –ë–û–¢ ==========

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN", callback_data="register")],
        [InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        f"ü§ñ –Ø –±–æ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π\n"
        f"üîê **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞ 1 –∫–ª–∏–∫** - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç\n\n"
        f"‚ú® **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**\n"
        f"‚Ä¢ ‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        f"‚Ä¢ üîí –ë–µ–∑ –≤–≤–æ–¥–∞ email –∏ –ø–∞—Ä–æ–ª–µ–π\n"
        f"‚Ä¢ üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫: {DATA_LIMIT_GB} GB\n"
        f"‚Ä¢ üåê –î–æ—Å—Ç—É–ø –∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ **¬´üöÄ –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN¬ª** —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É!"
    )

    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    if query.data == "register":
        await register_user(query, context)
    elif query.data == "status":
        await show_status(query, context)
    elif query.data == "help":
        await help_command(query, context)


async def register_user(query, context):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram OAuth"""
    user = query.from_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = get_user(user.id)

    if existing_user:
        subscription_url = existing_user[5]  # subscription_url –≤ 6-–π –∫–æ–ª–æ–Ω–∫–µ
        await query.edit_message_text(
            f"‚úÖ **–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!**\n\n"
            f"üîó **–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**\n"
            f"`{subscription_url}`\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å' –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await query.edit_message_text(
        "‚è≥ **–°–æ–∑–¥–∞–µ–º –≤–∞—à VPN –∞–∫–∫–∞—É–Ω—Ç...**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞...",
        parse_mode=ParseMode.MARKDOWN
    )

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    existing_client = get_existing_client(user.id)

    if existing_client:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        client_result = existing_client
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        client_result = create_xui_client(
            user.id,
            user.username,
            user.full_name,
            DATA_LIMIT_GB
        )

    if client_result and client_result.get('client_id'):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        success = add_user(
            user.id,
            user.username,
            user.full_name,
            user.language_code,
            client_result['subscription_url'],
            client_result['client_id']
        )

        if success:
            if client_result.get('existing', False):
                message_header = "üîÑ **–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç!**"
            else:
                message_header = "üéâ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!**"

            user_info = (
                f"üë§ **Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.full_name}\n"
                f"üÜî **ID:** {user.id}\n"
            )
            if user.username:
                user_info += f"üì± **Username:** @{user.username}\n"

            await query.edit_message_text(
                f"{message_header}\n\n"
                f"{user_info}\n"
                f"üìß **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π email:** {client_result['email']}\n"
                f"üìä **–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:** {DATA_LIMIT_GB} GB\n\n"
                f"üîó **–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**\n"
                f"`{client_result['subscription_url']}`\n\n"
                f"üì± **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
                f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ\n"
                f"2. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –≤–∞—à VPN –∫–ª–∏–µ–Ω—Ç\n"
                f"3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n\n"
                f"üõ°Ô∏è **–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!**",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await query.edit_message_text(
                "‚ùå **–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!**\n\n"
                "VPN –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑–µ. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode=ParseMode.MARKDOWN
            )
    else:
        await query.edit_message_text(
            "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN –∞–∫–∫–∞—É–Ω—Ç–∞!**\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ü–∞–Ω–µ–ª—å 3x-ui –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
            "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ –ò–Ω–±–∞—É–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
            "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode=ParseMode.MARKDOWN
        )


async def show_status(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = query.from_user
    user_data = get_user(user.id)

    if user_data:
        _, telegram_id, username, full_name, language_code, subscription_url, xui_client_id, created_at = user_data

        status_text = (
            f"‚úÖ **–í–∞—à VPN –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω**\n\n"
            f"üë§ **Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        )

        if username:
            status_text += f"üì± **Username:** @{username}\n"

        status_text += (
            f"üÜî **Telegram ID:** {telegram_id}\n"
            f"üìä **–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:** {DATA_LIMIT_GB} GB\n"
            f"üìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {created_at[:10]}\n"
            f"üÜî **ID –∫–ª–∏–µ–Ω—Ç–∞:** {xui_client_id}\n\n"
        )

        if subscription_url:
            status_text += f"üîó **–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**\n`{subscription_url}`\n\n"

        status_text += (
            "üí° **–°–æ–≤–µ—Ç—ã:**\n"
            "‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –∫–ª–∏–µ–Ω—Ç–µ –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ\n"
            "‚Ä¢ –î–ª—è –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞"
        )

        await query.edit_message_text(status_text, parse_mode=ParseMode.MARKDOWN)
    else:
        keyboard = [
            [InlineKeyboardButton("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "‚ùå **–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!**\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å VPN –∞–∫–∫–∞—É–Ω—Ç "
            "–∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à Telegram –ø—Ä–æ—Ñ–∏–ª—å.",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )


async def help_command(query, context):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    support_mention = f"@{BOT_USERNAME}" if BOT_USERNAME else "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"

    help_text = (
        "‚ÑπÔ∏è **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN –±–æ—Ç–∞**\n\n"
        "üî∏ **–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:**\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üöÄ –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN'\n"
        "2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n\n"
        "üî∏ **–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:**\n"
        "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É\n"
        "2. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –≤–∞—à VPN –∫–ª–∏–µ–Ω—Ç\n"
        "3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n\n"
        "üî∏ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:**\n"
        "‚Ä¢ V2RayN (Windows)\n"
        "‚Ä¢ Shadowrocket (iOS)\n"
        "‚Ä¢ V2RayNG (Android)\n"
        "‚Ä¢ Qv2ray (Linux/Mac/Windows)\n\n"
        "üî∏ **–õ–∏–º–∏—Ç—ã:**\n"
        f"‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: {DATA_LIMIT_GB} GB\n"
        "‚Ä¢ –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n\n"
        f"üÜò **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** {support_mention}\n\n"
        "üîê **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**\n"
        "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram OAuth\n"
        "‚Ä¢ –ù–µ —Ç—Ä–µ–±—É–µ–º email –∏ –ø–∞—Ä–æ–ª–∏\n"
        "‚Ä¢ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã"
    )
    await query.edit_message_text(help_text, parse_mode=ParseMode.MARKDOWN)


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status"""
    user = update.effective_user
    user_data = get_user(user.id)

    if user_data:
        subscription_url = user_data[5]
        await update.message.reply_text(
            f"üîó **–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**\n`{subscription_url}`\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∞–∫–∫–∞—É–Ω—Ç–µ.",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        keyboard = [
            [InlineKeyboardButton("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=reply_markup
        )


async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ 3x-ui"""
    await update.message.reply_text("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ 3x-ui...")

    if test_xui_connection():
        await update.message.reply_text("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ 3x-ui —É—Å–ø–µ—à–Ω–æ!")
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ 3x-ui")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ VPN Telegram –±–æ—Ç–∞ —Å OAuth...")
    logger.info(f"üîó 3x-ui –ø–∞–Ω–µ–ª—å: {XUI_PANEL_URL}")
    logger.info(f"üìä –õ–∏–º–∏—Ç –¥–∞–Ω–Ω—ã—Ö: {DATA_LIMIT_GB} GB")
    logger.info(f"üéØ Inbound ID: {INBOUND_ID}")
    logger.info(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_NAME}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ 3x-ui...")
    if not test_xui_connection():
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ 3x-ui –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å Telegram OAuth!")
    application.run_polling()


if __name__ == '__main__':
    main()
